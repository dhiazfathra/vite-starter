name: Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**/*.ts'
      - 'test/**/*.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vitest.config.ts'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**/*.ts'
      - 'test/**/*.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vitest.config.ts'
      - '.github/workflows/test.yml'

# Limit concurrent runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
      # Fast fail is disabled to ensure we get results from all test jobs
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for faster checkout

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Cache node_modules to speed up subsequent runs
    - name: Cache node_modules
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: npm ci

    # Cache Jest
    - name: Cache Jest
      uses: actions/cache@v4
      with:
        path: |
          node_modules/.cache/jest
        key: ${{ runner.os }}-jest-${{ matrix.node-version }}-${{ hashFiles('**/jest.config.js') }}-${{ hashFiles('**/*.spec.ts') }}
        restore-keys: |
          ${{ runner.os }}-jest-${{ matrix.node-version }}-

    - name: Run tests with coverage and generate JUnit XML
      run: JEST_JUNIT_CLASSNAME="{filepath}" JEST_JUNIT_OUTPUT_DIR=./junit JEST_JUNIT_OUTPUT_NAME=junit.xml npm run test:cov -- --reporters=jest-junit

    - name: Verify coverage thresholds
      run: npm run verify:coverage

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          ./coverage
          ./junit
        retention-days: 1

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'

    # Cache node_modules
    - name: Cache node_modules
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-22.x-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-22.x-

    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: npm ci

    # Cache build output
    - name: Cache build
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}

    - name: Build with bundle analysis
      run: npm run build

  upload-coverage:
    runs-on: ubuntu-latest
    needs: test
    # Skip this job for Dependabot PRs
    if: github.actor != 'dependabot[bot]'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: .

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: ${{ !cancelled() }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        flags: unittests
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results to Codecov
      uses: codecov/test-results-action@v1
      if: ${{ !cancelled() }}
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
